source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('heatmapper')
brushedPoints(get_dist_file(), input$dist_brush, xvar = "Beta", yvar = "Beta")
shiny::runApp('heatmapper')
data(attitude)
attitude
rownames(attitude)
colnames(attitude)
qplot(x=Var1, y=Var2, data=melt(cor(attitude)), fill=value, geom="tile")
library(ggplot2)
library(reshape2)
qplot(x=Var1, y=Var2, data=melt(cor(attitude)), fill=value, geom="tile")
shiny::runApp('heatmapper')
attitude
levels(attitude)
factors(attitude)
attitude$1
attitude[1,]
attitude[,1]
shiny::runApp('heatmapper')
Var1
shiny::runApp('heatmapper')
attitude
shiny::runApp('heatmapper')
Var1
qplot(x=Var1, y=Var2, data=melt(cor(attitude)), fill=value, geom="tile")
Var1
melt(cor(attitude))
shiny::runApp('heatmapper')
file
cor(file)
melt(file)
melt(cor(file))
file
shiny::runApp('heatmapper')
print(length(x))
shiny::runApp('heatmapper')
file
dist
shiny::runApp('heatmapper')
file
file <- read.table("data/dist.txt", header=FALSE, sep="\t")
file <- read.table("heatmapper/data/dist.txt", header=FALSE, sep="\t")
file
shiny::runApp('heatmapper')
file
colnames(file) <- file[[1]]
file <- file[-1,]
colnames(file)[1] <- "cols"
melt(file, id.vars = "cols", variable.name = "rows")
shiny::runApp('heatmapper')
pie(rep(1, 12), col = rainbow(12))
source('~/.active-rstudio-document', echo=TRUE)
qplot(data = x, x = x$first, y = x$second, fill = value, geom = "tile", asp = 1/2) + scale_fill_gradientn(colours = rainbow(7))
source('~/.active-rstudio-document', echo=TRUE)
source('~/Wishart Lab Work/R experiment files/colorpicker.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Wishart Lab Work/R experiment files/colorpicker.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Wishart Lab Work/R experiment files/colorpicker.R', echo=TRUE)
brushedPoints(x)
source('~/Wishart Lab Work/R experiment files/colorpicker.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Wishart Lab Work/R experiment files/colorpicker.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x <- data.frame(first = rep(1,10), second = rainbow(10))
x$first
x$second
source('~/Wishart Lab Work/R experiment files/colorpicker.R', echo=TRUE)
brushedPoints
source('~/Wishart Lab Work/R experiment files/colorpicker.R', echo=TRUE)
?qplot
melt(x)
x <- data.frame(first = rep(1,10), second = 1:10, value = rainbow(10))
melt(x)
source('~/Wishart Lab Work/R experiment files/colorpicker.R', echo=TRUE)
x <- data.frame(first = 1:10, second = 1:10)#, value = rainbow(10))
rownames(x)
names(x)
x <- data.frame(first = 1:10, second = 1:10, value = rainbow(10))
x
names(x)
source('~/Wishart Lab Work/R experiment files/colorpicker.R', echo=TRUE)
class(x)
class(x$first)
class(x$second)
class(x$value)
file <- read.table("heatmapper/data/dist.txt", header = TRUE, sep = "\t")
file
class(file)
class(file$Name)
class(file$Alpha)
data <- melt(file, id.vars = "cols", variable.name = "rows")
colnames(file)[1] <- "cols"
data <- melt(file, id.vars = "cols", variable.name = "rows")
class(data)
class(data$cols)
class(data$rows)
class(data$value)
source('~/Wishart Lab Work/R experiment files/colorpicker.R', echo=TRUE)
install.packages("RLumShiny")
source('~/Wishart Lab Work/R experiment files/colorpicker.R', echo=TRUE)
jscolorInput(inputId, label, value, position = "bottom", color = "transparent", mode = "HSV", slider = TRUE, close = FALSE)
source('~/Wishart Lab Work/R experiment files/colorpicker.R', echo=TRUE)
shiny::runApp('heatmapper')
jscolorInput
shiny::runApp('heatmapper')
jscolorInput
shiny::runApp('heatmapper')
inputId <- "sdf"
paste0("$('", inputId, "').trigger('afterChange')")
shiny::runApp('heatmapper')
includeScript("www/js/jscolor/jscolorbinding.js"),
shiny::runApp('heatmapper')
source("helpers.R")
source("heatmapper/helpers.R")
shiny::runApp('heatmapper')
source("heatmapper/helpers.R")
shiny::runApp('heatmapper')
source("heatmapper/helpers.R")
shiny::runApp('heatmapper')
source("heatmapper/helpers.R")
shiny::runApp('heatmapper')
source("heatmapper/helpers.R")
shiny::runApp('heatmapper')
source("heatmapper/helpers.R")
shiny::runApp('heatmapper')
source("heatmapper/helpers.R")
shiny::runApp('heatmapper')
source("heatmapper/helpers.R")
shiny::runApp('heatmapper')
source("heatmapper/helpers.R")
shiny::runApp('heatmapper')
source("heatmapper/helpers.R")
shiny::runApp('heatmapper')
source("heatmapper/helpers.R")
shiny::runApp('heatmapper')
shiny::runApp('distance_matrix')
shiny::runApp('latitude_longitude')
shiny::runApp('heatmapper/distance_matrix')
jscolourInput
shiny::runApp('heatmapper/distance_matrix')
library(devtools)
devtools::install_github("sbabicki/jscolourR")
shiny::runApp('heatmapper/distance_matrix')
sessionInfo()
devtools::install_github("rstudio/leaflet")
leaflet()
library(leaflet)
leaflet()
source('~/.active-rstudio-document', echo=TRUE)
source('~/Wishart Lab Work/Other Heatmap Programs/leafletTest.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Wishart Lab Work/Other Heatmap Programs/leafletTest.R', echo=TRUE)
shiny::runApp('heatmapper/latitude_longitude')
library(raster)
source('~/Wishart Lab Work/Other Heatmap Programs/leafletTest.R', echo=TRUE)
install.packages("rgdal")
df
df <- data.frame(
lng=c(-1+rnorm(50,0,.5),-2+rnorm(50,0,0.5),-4.5+rnorm(50,0,.5)),
lat =c(52+rnorm(50,0,.5),54+rnorm(50,0,0.5),56+rnorm(50,0,.5)))
df
cbind(df$lat,df$lat)
source('~/Wishart Lab Work/Other Heatmap Programs/leafletTest.R', echo=TRUE)
install.packages(maptools)
install.packages("maptools")
source('~/Wishart Lab Work/Other Heatmap Programs/leafletTest.R', echo=TRUE)
bkde2D
source('~/Wishart Lab Work/Other Heatmap Programs/leafletTest.R', echo=TRUE)
CL
source('~/Wishart Lab Work/Other Heatmap Programs/leafletTest.R', echo=TRUE)
rainbow(7)[2]
rainbow(7)[3]
rainbow(7)[5]
source('~/Wishart Lab Work/Other Heatmap Programs/leafletTest.R', echo=TRUE)
rainbow(10)[1:10]
source('~/Wishart Lab Work/Other Heatmap Programs/leafletTest.R', echo=TRUE)
rainbow(2)
source('~/Wishart Lab Work/Other Heatmap Programs/leafletTest.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Wishart Lab Work/Other Heatmap Programs/leafletTest.R', echo=TRUE)
read.csv("latlong.txt", header = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
read.csv("/latlong.txt", header = TRUE)
read.csv("latlong.txt", header = TRUE)
read.csv("latlong.txt", header = TRUE, sep = "\t")
source('~/Wishart Lab Work/Other Heatmap Programs/leafletTest.R', echo=TRUE)
shiny::runApp('heatmapper/latitude_longitude')
source('~/Wishart Lab Work/Other Heatmap Programs/leafletTest.R', echo=TRUE)
shiny::runApp('heatmapper/latitude_longitude')
source('~/Wishart Lab Work/Other Heatmap Programs/leafletTest.R', echo=TRUE)
shiny::runApp('heatmapper/latitude_longitude')
shiny::runApp('heatmapper/distance_matrix')
source('~/Wishart Lab Work/R experiment files/testingleaflet.R', echo=TRUE)
x <-geojson <- readLines("json/countries.geojson", warn = FALSE) %>%
paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
topoData <- readLines("json/us-10m.json") %>% paste(collapse = "\n")
topoData <- readLines("ca-all.geo.json") %>% paste(collapse = "\n")
leaflet() %>% setView(lng = -98.583, lat = 39.833, zoom = 3) %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
source('~/Wishart Lab Work/R experiment files/testingleaflet.R', echo=TRUE)
topoData
source('~/Wishart Lab Work/R experiment files/testingleaflet.R', echo=TRUE)
shiny::runApp('heatmapper/distance_matrix')
shiny::runApp('leafletchoropleth')
readRDS(file = "heatmapper/choropleth/data/counties.rds")
readRDS(file = "heatmapper/choropleth/data/counties.rds")[[2]]
c(readRDS(file = "heatmapper/choropleth/data/counties.rds")[[2]])
shiny::runApp('leafletchoropleth')
length(c(readRDS(file = "heatmapper/choropleth/data/counties.rds")[[2]]))
shiny::runApp('leafletchoropleth')
unpaste
paste
shiny::runApp('leafletchoropleth')
print(name)
shiny::runApp('leafletchoropleth')
map('county')
stateNames
shiny::runApp('leafletchoropleth')
map("county", plot=FALSE, fill=TRUE)
test <- readRDS("data/counties.rds")
name <- c(test[[1]])
nums <- c(test[[2]])
names(nums) <- name
density = c(nums)
test <- readRDS("leafletchoropleth/data/counties.rds")
name <- c(test[[1]])
nums <- c(test[[2]])
names(nums) <- name
density = c(nums)
map("county", names(density))
map("county"
)
head(map("county"), 2)
head(map("county")[[1]], 2)
head(map("county")[1,], 2)
head(map("county"), plot = FALSE, names = TRUE)
map("county")$names
names(density)
shiny::runApp('leafletchoropleth')
names(density)
head(map("county", stateNames, plot=FALSE, fill=TRUE), 4)
head(names(density), 2)
head(names(density), 5)
head(map("county", plot=FALSE, fill=TRUE)$names, 4)
head(map("county", plot=FALSE, fill=TRUE)$names, 5)
shiny::runApp('leafletchoropleth')
shiny::runApp('heatmapper/leafletchoropleth')
map.cities("canada.cities")
map.cities(x = world.cities, country = "canada")
map.cities(x = canada.cities)
map.cities(x = "canada.cities")
shiny::runApp('heatmapper/leafletchoropleth')
read.delim("heatmapper/leafletchoropleth/data/statetest.txt")
read.delim("heatmapper/leafletchoropleth/data/statetest2.txt")
shiny::runApp('heatmapper/leafletchoropleth')
shiny::runApp('heatmapper/choropleth')
shiny::runApp('heatmapper/leafletchoropleth')
shiny::runApp('heatmapper/choropleth')
shiny::runApp('heatmapper/leafletchoropleth')
library(KEGGREST)
install.packages("KEGGREST")
source("http://bioconductor.org/biocLite.R")
biocLite("KEGGREST")
source('~/.active-rstudio-document', echo=TRUE)
source('~/uniprot.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/uniprot.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/uniprot.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/uniprot.R', echo=TRUE)
print(gene_names)
source('~/uniprot.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/uniprot.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/uniprot.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/uniprot.R', echo=TRUE)
read.table("m2mProteins/eco_names.txt")
test <- read.table("m2mProteins/eco_names.txt")
class(test)
test <- as.list(test)
test
class(test)
source('~/uniprot.R', echo=TRUE)
eco_names <- as.list(read.table("m2mProteins/eco_names.txt"))
eco_names
lapply(eco_names, function(path_name){})
lapply(eco_names, function(path_name){print(path_name)})
eco_names <- c(read.table("m2mProteins/eco_names.txt"))
eco_names
source('~/uniprot.R', echo=TRUE)
eco_names
eco_names[1]
eco_names[[1]]
eco_names[[2]]
eco_names[2
]
eco_names <- read.table("m2mProteins/eco_names.txt")
eco_names
eco_names[1]
eco_names[[1]]
list(eco_names)
list(eco_names)[1]
list(eco_names)[[1]]
source('~/uniprot.R', echo=TRUE)
eco_names <- read.table("m2mProteins/eco_names.txt", sep = "\n")
eco_names
eco_names[2]
eco_names[[2]]
source('~/uniprot.R', echo=TRUE)
eco_names<- read.delim("m2mProteins/eco_names.txt", sep = "\n")
eco_names
list(eco_names)
unlist(eco_names)
c(eco_names)
c(eco_names)[1]
c(eco_names)[2]
c(eco_names)[[1]]
as.vector(eco_names)
as.vector(eco_names)[[1]]
as.vector(eco_names)[1]
as.vector(eco_names)[1,1]
c(eco_names)
c(eco_names)[1]
c(eco_names)[1,1]
list(eco_names)
list(eco_names)[1]
test <- as.list(eco_names[[1]])
test
levels(test)
source('~/uniprot.R', echo=TRUE)
source('~/databaseParsing.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/databaseParsing.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/databaseParsing.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/databaseParsing.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/databaseParsing.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/databaseParsing.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/databaseParsing.R', echo=TRUE)
OUT
source('~/databaseParsing.R', echo=TRUE)
length(in_list)
source('~/databaseParsing.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/databaseParsing.R', echo=TRUE)
x
source('~/databaseParsing.R', echo=TRUE)
id_uniprot[grepl(uniprot[1], id_uniprot)]
id_uniprot[grepl(uniprot[2], id_uniprot)]
source('~/databaseParsing.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
id_uniprot[grepl(uniprot[100], id_uniprot)]
id_uniprot[grepl("uniprot[100]", id_uniprot)]
id_uniprot[grepl("uniprot[100]", id_uniprot)] == 0
is.na(id_uniprot[grepl("uniprot[100]", id_uniprot)])
print(is.na(id_uniprot[grepl("uniprot[100]", id_uniprot)]))
id_uniprot[grepl("uniprot[100]", id_uniprot)] != 0
source('~/databaseParsing.R', echo=TRUE)
id_uniprot[grepl(uniprot[100], id_uniprot)] != 0
id_uniprot[grepl("uniprot[100]", id_uniprot)] != 0
if(id_uniprot[grepl("uniprot[100]", id_uniprot)] != 0){print("SDKF")}
length(id_uniprot[grepl("uniprot[100]", id_uniprot)])
length(id_uniprot[grepl(uniprot[100], id_uniprot)])
source('~/databaseParsing.R', echo=TRUE)
sum(1882, 292)
source('~/databaseParsing.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
print(head(in_list, 1))
uniprot <- read.table("m2mProteins/ALL.txt", sep="\n", header = FALSE)[[1]]
id_uniprot <- read.csv("m2mProteins/query_result.csv")[[2]]
id <- read.csv("m2mProteins/query_result.csv")[[1]]
id_uniprot[grep("ds", id_uniprot)]
length(id_uniprot[grep("ds", id_uniprot)])
source('~/.active-rstudio-document', echo=TRUE)
print(head(in_list, 1))
print(head(in_list, 2))
print(head(in_list, 3))
source('~/.active-rstudio-document', echo=TRUE)
in_list[1]
in_list[2]
source('~/.active-rstudio-document', echo=TRUE)
in_list[1]
id_uniprot[grep(uniprot[1], id_uniprot)]
id[id_uniprot[grep(uniprot[1], id_uniprot)]]
source('~/.active-rstudio-document', echo=TRUE)
in_list[1]
in_list[2]
in_list[3]
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('heatmapper/leafletchoropleth')
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('heatmapper/leafletchoropleth')
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('heatmapper/leafletchoropleth')
qplot(Sepal.Width, Sepal.Length, data = iris)
library(ggplot2)
qplot(Sepal.Width, Sepal.Length, data = iris)
library(KEGGREST)
listDatabases()
listDatabases()$compound
listDatabases()["compound"]
listDatabases("compound")
keggList("organism")
keggList("compound")
keggGet("cpd:c00141")
keggGet("cpd:c00141/path:map01110")
keggGet("cpd:c00141")$PATHWAY
keggGet("cpd:c00141")[[1]]$PATHWAY
keggGet("cpd:c00141")[[1]]$PATHWAY[2]
keggGet("cpd:c00141")[[1]]$PATHWAY[1]
keggGet("cpd:c00141")[[1]]$PATHWAY[[1]]
keggGet("cpd:c00141")[[1]]$PATHWAY[[2]]
source('~/.active-rstudio-document', echo=TRUE)
keggGet(cmp)[[1]]$PATHWAY
summary(keggGet(cmp))
b <- c("one","two","three")
class(b)
b <- "sdf"
class(b)
b <- c(1,2,3)
class(b)
list(b)
class(list(b))
list(b)[[1]]
list(b)[1]
b[1]
b[[1]]
source('~/.active-rstudio-document', echo=TRUE)
source("http://bioconductor.org/biocLite.R")
biocLite("KEGGREST")
source('~/.active-rstudio-document', echo=TRUE)
keggGet(eco)
grep(pattern = "K-12 MG1655", x = path_organisms)
grep(pattern = "K-12 MG1655", x = path_organisms, value = TRUE)
keggGet(eco)[[1]]
keggGet(eco)
names(x)
eco
source('~/.active-rstudio-document', echo=TRUE)
y <- c()
y
class(y)
y <- (1, 2, 3)
y <- c(1, 2, 3)
class(y)
c("ds", "sdf")
class(c("ds", "sdf"))
c(1, "3")
list(1, "3")
source('~/.active-rstudio-document', echo=TRUE)
grep(pattern = "K-12 MG1655", x = path_organism, value = FALSE)
grep(pattern = "K-12 MG1655", x = path_organisms, value = FALSE)
source('~/.active-rstudio-document', echo=TRUE)
eco[4]
source('~/.active-rstudio-document', echo=TRUE)
file[61]
file[60]
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('heatmapper/leafletchoropleth')
rainbow(50)[[40]]
shiny::runApp('heatmapper/leafletchoropleth')
rainbow(7)[[7]]
shiny::runApp('heatmapper/leafletchoropleth')
rainbow(2)[[7]]
shiny::runApp('heatmapper/leafletchoropleth')
rainbow(7)[[1]]
shiny::runApp('heatmapper/leafletchoropleth')
density <- NULL
shiny::runApp('heatmapper/leafletchoropleth')
colours <- null
colours <- NULL
colors <- NULL
density <- NULL
shiny::runApp('heatmapper/leafletchoropleth')
colors <- NULL
density <- NULL
shiny::runApp('heatmapper/leafletchoropleth')
densityRanges <- NULL
densityBreaks <- NULL
colors <- NULL
shiny::runApp('heatmapper/leafletchoropleth')
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('heatmapper/leafletchoropleth')
densityRanges
densityRanges <- NULL
densityRanges
shiny::runApp('heatmapper/leafletchoropleth')
densityRanges
shiny::runApp('heatmapper/leafletchoropleth')
densityRanges <- NULL
shiny::runApp('heatmapper/leafletchoropleth')
densityRanges <- NULL
shiny::runApp('heatmapper/leafletchoropleth')
densityRanges <- NULL
shiny::runApp('heatmapper/leafletchoropleth')
densityRanges <- NULL
shiny::runApp('heatmapper/leafletchoropleth')
densityRanges <- NULL
shiny::runApp('heatmapper/leafletchoropleth')
options(error = browser())
shiny::runApp('heatmapper/leafletchoropleth')
